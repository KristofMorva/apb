This is a short description of some new script functions you can use.
Some scriptfunctions are not tested or not tested sufficent and can only be seen as experimental.
It is recommend to give any script file which contains one of the new commands the file-extension ".gsx" instead of ".gsc"
.gsx scriptfiles can use the same name like .gsc scriptfiles thogether.
On servers running this modification .gsx script files will be executed instead .gsc scriptfiles if a same named .gsx scriptfile is there.
This allows to create mods/maps containing scripts which can use the extended functionality if available but fall back to traditional script if you provide fallback
.gsc script that can run on any traditional server.


=========================================

New Script_Callbacks

=========================================



============================
"CodeCallback_PlayerSayCmd(string <text>)" Getting called after a player types into chat with one of these characters as 1st character: % . / &
			    Chat will not be displayed on screen. Instead this callback function getting called.

"CodeCallback_PlayerSayAll(string <text>)" Getting called after a player types into chat anything
Both functions will put at 1st argument the text from player. The player entity will be available too with the "self" prefix
This two functions can not be used together. You can only use one of them.


"CodeCallback_GotSequencedMessage(string <command>)" Getting called on response from script connected masterserver.
The command will be passed as 1st argument. This callback-function has to be present to use the connectServer() function


"CodeCallback_GotSequencedPlayerMessage(string <command>)" Getting called on response from script connected masterserver.
The command will be passed as 1st argument. The player entity will be available too with the "self" prefix.
This callback-function has to be present to use the connectServer() function



============================


All this functions have to be included into:
"maps/mp/gametypes/_callbacksetup"



==========================================

Functions on Players

==========================================


GetUid
============================
Returns the players Uid. Will only work with valid secondary authserver and in sv_authorizemode = 1
Usage: int = self getUid();


GetUserinfo
============================
Returns the players userinfo value.
Example: name = self getuserinfo("name");
Example: myucvar = self getuserinfo("myucvar");
myucvar has to be set onto the players computer prior with setu myucvar "" so it can be queried in userinfo
The userinfo will automatically update if myucvar changes onto the client computer. This can be used to transfer
text from client to server over a userinfo cvar.
Usage: string self getUserinfo(userinfo key <string>);


GetPing
============================
Returns the current measured scoreboard ping of this player.
Usage: int = self getPing();







=========================================

General purpose functions

=========================================

exec
==========================
Executes the given command on server as console command
Usage: void = exec(string <string>);


==========================================

Functions on strings

==========================================



StrTokByLen
============================
TokenizeByStringLength
Returns an array of the string that got sperated in tokens.
It will count the number of characters of given string and will tokenize it so that it will never exceed the given limit.
This function tries to separate the string so that words remains complete
Usage: array = StrTokByLen(string <string>, maxcharacter count <int>);


StrTokByPixLen
============================
Returns an array of the string that got sperated in tokens.
It will count the pixelwidth of given string and will tokenize it so that it will never exceed the given limit.
The limit applies for 2.5 fontsize.
This function tries to separate the string so that words remains complete
Usage: array = StrTokByPixLen(string <string>, float <codPixelCount>);



StrPixLen
============================
This function measures the average length of a given string if it would getting printed
in 2.5 fontsize.
Usage: float = StrPixLen(string <string>);



StrColorStrip
============================
Directly cleans the given string from all colorscodes. The original string will be modified!
If it is required that the original string remains you need to create a copy of string prior with copystr()
Usage: void = StrColorStrip(string <string>);



StrRepl
============================
This functions finds in a given mainstring all occurrences of a given searchstring and replace those with a given replacementstring
This function returns the resulting string. The mainstring will stay unaffected.
Usage: string = GScr_StrRepl(mainstring <string>, search <string>, replacement <string>);



CopyStr
============================
Creates a real copy of the given string and returns the location of the newly created copy
Usage: string = CopyStr(string <string>);



GetRealTime
============================
Returns the current time in seconds since 01/01/2012 UTC
Usage: int = getRealTime();



TimeToString
============================
Converts the time from function GetRealTime to string
Usage: string = TimeToString(int <realtime>, int <daytype>, int <dateformat>)

Format types time:
0    none
1    HH:MM 12 hours
2    HH.MM 12 hours
3    HH:MM 24 hours
4    HH.MM 24 hours
5    HH:MM:SS 12 hours
6    HH.MM.SS 12 hours
7    HH:MM:SS 24 hours
8    HH.MM.SS 24 hours

Format types date:
0    none
1    DD.MM.YY
2    DD.MM.YYYY
3    MM.DD.YY
4    MM.DD.YYYY
5    MM/DD/YY
6    MM/DD/YYYY
7    DD.MM
8    MM/DD



============================

Functions on files
At a maximum 10 files can be opened simultanly.
No longer used files have to be closed.
FS_FCloseAll() function can close everything with one call

============================



FS_FOpen
============================
Opens a file(name) inside current FS_GameDir. Mode is selectable. It can be either "read", "write", "append".
It returns on success an integer greater 0. This is the filehandle.
Usage: int = FS_FOpen(string <filename>, string <mode>)


FS_FClose
============================
Closes an already opened file. Opened files needs to be closed if they are no longer in use
This function returns nothing. It needs a filehandle as argument
Usage: FS_FClose(int <filehandle>)


FS_FCloseAll
============================
Closes all opened files with one call. Opened files needs to be closed if they are no longer in use
This function returns nothing. It needs no arguments
Usage: FS_FCloseAll()


FS_TestFile
============================
This function only tests whether a file exists. It must be a file inside the FS_GameDir.
This function returns true if file exists otherwise false.
Usage: bool = FS_TestFile(string <filename>)


FS_ReadLine
============================
This function reads a line from opened file and returns it as a string.
This function returns undefined if file can not be read (error) or you tried read from end of file.
Otherwise it just returns the line with the \n character stripped
Usage: string = FS_ReadFile(int <filehandle>)


FS_WriteLine
============================
This function writes/append a line to an opened file.


This function returns true on success, otherwise it just returns false
Usage: bool = FS_WriteLine(int <filehandle>, string <data>)

FS_Remove
============================
This function deletes a file inside the current FS_GameDir.

This function returns true on success otherwise it returns false.
Usage: bool = FS_Remove(string <filename>)




==========================================

Network related functions

==========================================




GScr_ConnectToMaster
============================
Usage: bool = connectServer(string <address:port>, string <connectkey>)

This function is for sequenced connections only.
It is used to connect to a server.
Address is either a domain name or any ipv4 or ipv6 address.
Connectkey is either just "" or a string of this format:
xxxx-xxxxxxxxxxxxxxxxxxxxxxxxxxxx
1st 4 characters are an index the other 28 characters are the real key
The 1st 12 characters of the real key are only used for challenge and connect requests
The other 16 characters are used for encrypting the established connection - Currently very weak encryption

The index is used on the other other end for faster lookup speed inside a table.
if the key is just "" the following key will be used: 0000-0000000000000000000000000000

On sucessfull resolving of the given address this function will return true - but that doesn't mean the connection is sucessfull


Please see also "New Script_Callbacks"



GScr_DisconnectFromMaster
============================
Usage: void = disconnectServer()


GScr_GetConnStatus

Usage: int = getConnStatus()
This function just retrieves the state of the connection
0 = disconnected
1 = challengeing
2 = connecting
3 = connected


PlayerCmd_TransmitBuffer
============================
Usage: void = self transmitBuffer(string <command>)

This functions sends out the content of the sendDate buffer to the connected server.
It is required that you have build the sendData buffer prior by using one of these two functions:
SetValueForKey() or SetTransmitBuffer()
If you have not build the sendData buffer you will send an empty message which contains only the values:
command; uid; guid; player's challenge

This function will always pass the informations: uid and guid
There is one argument. Command is a string so the server can know what kind of information you send him.
Command is a string so the server can know what you send him.
Ticket is a value that should be always present in the return message from the connected server.
It is used to recognize the player on server so the script can know for which player the message got sent.

If we get any response this will call:
maps/mp/gametypes/_callbacksetup::CodeCallback_GotSequencedPlayerMessage


Please see also "New Script_Callbacks"






GScr_TransmitBuffer
============================
Usage: void = TransmitBuffer(string <command>)

This functions sends out the content of the sendDate buffer to the connected server.
It is required that you have build the sendData buffer prior by using one of these two functions:
SetValueForKey() or SetTransmitBuffer()
If you have not build the sendData buffer you will send an empty message which contains only the value:
 command

There is one argument. Command is a string so the server can know what kind of information you send him.

If we get any response this will call:
maps/mp/gametypes/_callbacksetup::CodeCallback_GotSequencedMessage



Please see also "New Script_Callbacks"






GScr_SetValueForKey
============================
This functions sets a new key and a tied value on the network transmit buffer

Usage: void = setValueForKey(string <key>, string <value>)






GScr_GetValueForKey
============================
This functions retrieves the value for the given key from the current network receive buffer

Usage: string = getValueForKey(string <key>)







GScr_SetTransmitBuffer
============================
Usage: void = setTransmitBuffer(string <value>)

This functions overwrites the network transmit buffer with the given value

WARNING: This function conflict with the functions:
self SeqTransmitBuffer()
self TransmitBuffer()
SetValueForKey()

Never use this functions together!





GScr_GetReceiveBuffer
============================
This functions retrieves the current value of the network receive buffer
Usage: string = getReceiveBuffer()





======================================================================================================


For reference: all known script functions:


	{"createprintchannel", (void*)0x80bf832, 0},
	{"setprintchannel", (void*)0x80bf75c, 0},
	{"print", (void*)0x80bf706, 0},
	{"println", (void*)0x80c267e, 0},
	{"iprintln", (void*)0x80c2b8a, 0},
	{"iprintlnbold", (void*)0x80c2c14, 0},
	{"print3d", (void*)0x80c0c7e, 0},
	{"line", (void*)0x80bac00, 0},
	{"logstring", (void*)0x80bac06, 0},
	{"getent", (void*)0x80c7c72, 0},
	{"getentarray", (void*)0x80c7b44, 0},
	{"spawn", (void*)0x80bf638, 0},
	{"spawnplane", (void*)0x80c0fde, 0},
	{"spawnturret", (void*)0x80c0f52, 0},
	{"precacheturret", (void*)0x80bcd46, 0},
	{"spawnstruct", (void*)0x815f09a, 0},
	{"spawnhelicopter", (void*)0x80c0e54, 0},
	{"assert", (void*)0x80bb0fc, 0},
	{"assertex", (void*)0x80bb2e0, 0},
	{"assertmsg", (void*)0x80bb2b4, 0},
	{"isdefined", (void*)0x80bbf2c, 0},
	{"isstring", (void*)0x80bbf06, 0},
	{"isalive", (void*)0x80bbeaa, 0},
	{"getdvar", (void*)0x80bf5ec, 0},
	{"getdvarint", (void*)0x80bf5a8, 0},
	{"getdvarfloat", (void*)0x80bf56c, 0},
	{"setdvar", (void*)0x80c07ce, 0},
	{"gettime", (void*)0x80bb514, 0},
	{"getentbynum", (void*)0x80bbf96, 0},
	{"getweaponmodel", (void*)0x80bf490, 0},
	{"getanimlength", (void*)0x80bf416, 0},
	{"animhasnotetrack", (void*)0x80bf3aa, 0},
	{"getnotetracktimes", (void*)0x80bf346, 0},
	{"getbrushmodelcenter", (void*)0x80c199a, 0},
	{"objective_add", (void*)0x80c2234, 0},
	{"objective_delete", (void*)0x80c1da4, 0},
	{"objective_state", (void*)0x80c210a, 0},
	{"objective_icon", (void*)0x80be226, 0},
	{"objective_position", (void*)0x80c17ca, 0},
	{"objective_onentity", (void*)0x80c1716, 0},
	{"objective_current", (void*)0x80bef76, 0},
	{"missile_createattractorent", (void*)0x8093486, 0},
	{"missile_createattractororigin", (void*)0x8096c28, 0},
	{"missile_createrepulsorent", (void*)0x8096b5c, 0},
	{"missile_createrepulsororigin", (void*)0x8096a80, 0},
	{"missile_deleteattractor", (void*)0x80933b0, 0},
	{"bullettrace", (void*)0x80c65fa, 0},
	{"bullettracepassed", (void*)0x80bee92, 0},
	{"sighttracepassed", (void*)0x80c0198, 0},
	{"physicstrace", (void*)0x80be7b2, 0},
	{"playerphysicstrace", (void*)0x80c1e6a, 0},
	{"getmovedelta", (void*)0x80bec78, 0},
	{"getangledelta", (void*)0x80bed82, 0},
	{"getnorthyaw", (void*)0x80c1f0e, 0},
	{"randomint", (void*)0x80bec22, 0},
	{"randomfloat", (void*)0x80beb8a, 0},
	{"randomintrange", (void*)0x80bebb6, 0},
	{"randomfloatrange", (void*)0x80beb12, 0},
	{"sin", (void*)0x80beae6, 0},
	{"cos", (void*)0x80beaba, 0},
	{"tan", (void*)0x80bda00, 0},
	{"asin", (void*)0x80bea50, 0},
	{"acos", (void*)0x80be9e6, 0},
	{"atan", (void*)0x80be9ba, 0},
	{"int", (void*)0x80c1f56, 0},
	{"abs", (void*)0x80bd9e2, 0},
	{"min", (void*)0x80bd9a2, 0},
	{"max", (void*)0x80bd962, 0},
	{"floor", (void*)0x80bd92c, 0},
	{"ceil", (void*)0x80bd8f6, 0},
	{"sqrt", (void*)0x80be97e, 0},
	{"vectorfromlinetopoint", (void*)0x80c19fc, 0},
	{"pointonsegmentnearesttopoint", (void*)0x80c1c58, 0},
	{"distance", (void*)0x80c23dc, 0},
	{"distance2d", (void*)0x80be934, 0},
	{"distancesquared", (void*)0x80c2016, 0},
	{"length", (void*)0x80bde88, 0},
	{"lengthsquared", (void*)0x80c1c1c, 0},
	{"closer", (void*)0x80c206e, 0},
	{"vectordot", (void*)0x80c1bca, 0},
	{"vectornormalize", (void*)0x80c69aa, 0},
	{"vectortoangles", (void*)0x80be762, 0},
	{"vectorlerp", (void*)0x80be6da, 0},
	{"anglestoup", (void*)0x80be8ea, 0},
	{"anglestoright", (void*)0x80be8a0, 0},
	{"anglestoforward", (void*)0x80be856, 0},
	{"combineangles", (void*)0x80be652, 0},
	{"issubstr", (void*)0x80be60e, 0},
	{"getsubstr", (void*)0x80bb1de, 0},
	{"tolower", (void*)0x80be59c, 0},
	{"strtok", (void*)0x80be3d0, 0},
	{"musicplay", (void*)0x80bbe0c, 0},
	{"musicstop", (void*)0x80c1642, 0},
	{"soundfade", (void*)0x80bbd94, 0},
	{"ambientplay", (void*)0x80c1536, 0},
	{"ambientstop", (void*)0x80c146c, 0},
	{"precachemodel", (void*)0x80be37c, 0},
	{"precacheshellshock", (void*)0x80be308, 0},
	{"precacheitem", (void*)0x80be28a, 0},
	{"precacheshader", (void*)0x80be126, 0},
	{"precachestring", (void*)0x80be0ea, 0},
	{"precacherumble", (void*)0x80bb010, 0},
	{"loadfx", (void*)0x80be064, 0},
	{"playfx", (void*)0x80c6a38, 0},
	{"playfxontag", (void*)0x80bdec6, 0},
	{"playloopedfx", (void*)0x80c6fe8, 0},
	{"spawnfx", (void*)0x80c6d1e, 0},
	{"triggerfx", (void*)0x80c13b0, 0},
	{"physicsexplosionsphere", (void*)0x80bd00e, 0},
	{"physicsexplosioncylinder", (void*)0x80bcd78, 0},
	{"physicsjolt", (void*)0x80bcf16, 0},
	{"physicsjitter", (void*)0x80bce34, 0},
	{"setexpfog", (void*)0x80bdc1e, 0},
	{"grenadeexplosioneffect", (void*)0x80c0d86, 0},
	{"radiusdamage", (void*)0x80bdc12, 0},
	{"setplayerignoreradiusdamage", (void*)0x80bb0e2, 0},
	{"getnumparts", (void*)0x80c00d8, 0},
	{"getpartname", (void*)0x80c0104, 0},
	{"earthquake", (void*)0x80c112e, 0},
	{"newhudelem", (void*)0x808fd24, 0},
	{"newclienthudelem", (void*)0x808fb54, 0},
	{"newteamhudelem", (void*)0x808f95e, 0},
	{"resettimeout", (void*)0x815d050, 0},
	{"weaponfiretime", (void*)0x80bda62, 0},
	{"isweaponcliponly", (void*)0x80bd8b8, 0},
	{"isweapondetonationtimed", (void*)0x80bd59e, 0},
	{"weaponfiretime", (void*)0x80bda62, 0},
	{"weaponclipsize", (void*)0x80bd710, 0},
	{"weaponissemiauto", (void*)0x80bd6c0, 0},
	{"weaponisboltaction", (void*)0x80bd676, 0},
	{"weapontype", (void*)0x80bd866, 0},
	{"weaponclass", (void*)0x80bd81a, 0},
	{"weaponinventorytype", (void*)0x80bd7c8, 0},
	{"weaponstartammo", (void*)0x80bd62c, 0},
	{"weaponmaxammo", (void*)0x80bd5e2, 0},
	{"weaponaltweaponname", (void*)0x80bd75a, 0},
	{"isplayer", (void*)0x80bbe50, 0},
	{"isplayernumber", (void*)0x80bb4b6, 0},
	{"setwinningplayer", (void*)0x80bd504, 0},
	{"setwinningteam", (void*)0x80bd412, 0},
	{"announcement", (void*)0x80c0758, 0},
	{"clientannouncement", (void*)0x80c06d4, 0},
	{"getteamscore", (void*)0x80bbac0, 0},
	{"setteamscore", (void*)0x80bbcdc, 0},
	{"setclientnamemode", (void*)0x80bb88e, 0},
	{"updateclientnames", (void*)0x80bd356, 0},
	{"getteamplayersalive", (void*)0x80bb9f8, 0},
	{"objective_team", (void*)0x80bbb3a, 0},
	{"logprint", (void*)0x80bd1ac, 0},
	{"worldentnumber", (void*)0x80bb500, 0},
	{"obituary", (void*)0x80bd0ca, 0},
	{"positionwouldtelefrag", (void*)0x80c18a6, 0},
	{"getstarttime", (void*)0x80bb4ea, 0},
	{"precachemenu", (void*)0x80bcc4e, 0},
	{"precachestatusicon", (void*)0x80bc932, 0},
	{"precacheheadicon", (void*)0x80bc614, 0},
	{"precachelocationselector", (void*)0x80bc4a6, 0},
	{"map_restart", (void*)0x80bb6d2, 0},
	{"exitlevel", (void*)0x80bbfe2, 0},
	{"addtestclient", (void*)0x80bbf7c, 0},
	{"makedvarserverinfo", (void*)0x80c05bc, 0},
	{"setarchive", (void*)0x80bb034, 0},
	{"allclientsprint", (void*)0x80bbc8c, 0},
	{"clientprint", (void*)0x80bbc20, 0},
	{"mapexists", (void*)0x80bb556, 0},
	{"isvalidgametype", (void*)0x80c25f8, 0},
	{"matchend", (void*)0x80bb04c, 0},
	{"setplayerteamrank", (void*)0x80bb052, 0},
	{"sendranks", (void*)0x80bb058, 0},
	{"endparty", (void*)0x80bb05e, 0},
	{"setteamradar", (void*)0x80bb958, 0},
	{"getteamradar", (void*)0x80bb8d8, 0},
	{"getassignedteam", (void*)0x80bb48e, 0},
	{"setvotestring", (void*)0x80bb7e0, 0},
	{"setvotetime", (void*)0x80bb73e, 0},
	{"setvoteyescount", (void*)0x80bb360, 0},
	{"setvotenocount", (void*)0x80bb320, 0},
	{"openfile", GScr_FS_FOpen, 0},
	{"closefile", GScr_FS_FClose, 0},
	{"fprintln", GScr_FS_WriteLine, 0},
	{"fprintfields", (void*)0x80c1c16, 1},
	{"freadln", GScr_FS_ReadLine, 0},
	{"fgetarg", (void*)0x80bb02e, 1},
	{"kick", (void*)0x80bb5e8, 0},
	{"ban", (void*)0x80bb5a2, 0},
	{"map", (void*)0x80bb628, 0},
	{"playrumbleonposition", (void*)0x80bb03a, 0},
	{"playrumblelooponposition", (void*)0x80bb040, 0},
	{"stopallrumbles", (void*)0x80bb046, 0},
	{"soundexists", (void*)0x80bb52a, 0},
	{"issplitscreen", (void*)0x80bb4a2, 0},
	{"setminimap", (void*)0x80c2436, 0},
	{"setmapcenter", (void*)0x80bb450, 0},
	{"setgameendtime", (void*)0x80bb41e, 0},
	{"getarraykeys", (void*)0x80bb3c4, 0},
	{"searchforonlinegames", (void*)0x80bb06a, 0},
	{"quitlobby", (void*)0x80bb070, 0},
	{"quitparty", (void*)0x80bb076, 0},
	{"startparty", (void*)0x80bb07c, 0},
	{"startprivatematch", (void*)0x80bb082, 0},
	{"visionsetnaked", (void*)0x80c12f8, 0},
	{"visionsetnight", (void*)0x80c1240, 0},
	{"tablelookup", (void*)0x80bb122, 0},
	{"tablelookupistring", (void*)0x80c1b0e, 0},
	{"endlobby", (void*)0x80bb088, 0},
	{"fs_fopen", GScr_FS_FOpen, 0},
	{"fs_fclose", GScr_FS_FClose, 0},
	{"fs_fcloseall", GScr_FS_FCloseAll, 0},
	{"fs_testfile", GScr_FS_TestFile, 0},
	{"fs_readline", GScr_FS_ReadLine, 0},
	{"fs_writeline", GScr_FS_WriteLine, 0},
	{"fs_remove", GScr_FS_Remove, 0},
	{"getrealtime", GScr_GetRealTime, 0},
	{"timetostring", GScr_TimeToString, 0},
	{"strtokbypixlen", GScr_StrTokByPixLen, 0},
	{"strpixlen", GScr_StrPixLen, 0},
	{"strcolorstrip", GScr_StrColorStrip, 0},
	{"copystr", GScr_CopyString, 0},
	{"strrepl", GScr_StrRepl, 0},
	{"strtokbylen", GScr_StrTokByLen, 0},
	{"strlen", GScr_StrLen, 0},



Functions on players usually require the self prefix:

	{"giveweapon", (void*)0x80abc48, 0},
	{"takeweapon", (void*)0x80abbb4, 0},
	{"takeallweapons", (void*)0x80abb0e, 0},
	{"getcurrentweapon", (void*)0x80ad386, 0},
	{"getcurrentoffhand", (void*)0x80aa3f2, 0},
	{"hasweapon", (void*)0x80a9098, 0},
	{"switchtoweapon", (void*)0x80ac484, 0},
	{"switchtooffhand", (void*)0x80ac37a, 0},
	{"givestartammo", (void*)0x80ac2b4, 0},
	{"givemaxammo", (void*)0x80ac1a4, 0},
	{"getfractionstartammo", (void*)0x80ac09c, 0},
	{"getfractionmaxammo", (void*)0x80abf94, 0},
	{"setorigin", (void*)0x80ace3e, 0},
	{"getvelocity", (void*)0x80ab73a, 0},
	{"setplayerangles", (void*)0x80ab7b0, 0},
	{"getplayerangles", (void*)0x80ab6c2, 0},
	{"usebuttonpressed", (void*)0x80a9b46, 0},
	{"attackbuttonpressed", (void*)0x80a9aae, 0},
	{"adsbuttonpressed", (void*)0x80a9a14, 0},
	{"meleebuttonpressed", (void*)0x80a997c, 0},
	{"fragbuttonpressed", (void*)0x80a98e2, 0},
	{"secondaryoffhandbuttonpressed", (void*)0x80a9848, 0},
	{"playerads", (void*)0x80ab916, 0},
	{"isonground", (void*)0x80a979a, 0},
	{"pingplayer", (void*)0x80a8810, 0},
	{"setviewmodel", (void*)0x80ab61a, 0},
	{"getviewmodel", (void*)0x80ab4f4, 0},
	{"setoffhandsecondaryclass", (void*)0x80a9610, 0},
	{"getoffhandsecondaryclass", (void*)0x80ab576, 0},
	{"beginlocationselection", (void*)0x80ab366, 0},
	{"endlocationselection", (void*)0x80a86b2, 0},
	{"buttonpressed", (void*)0x80a9838, 0},
	{"sayall", (void*)0x80ab296, 0},
	{"sayteam", (void*)0x80ab1c6, 0},
	{"showscoreboard", (void*)0x80ab142, 0},
	{"setspawnweapon", (void*)0x80ab052, 0},
	{"dropitem", (void*)0x80aaf2a, 0},
	{"finishplayerdamage", (void*)0x80ac58e, 0},
	{"suicide", (void*)0x80aae5c, 0},
	{"openmenu", (void*)0x80aad5c, 0},
	{"openmenunomouse", (void*)0x80aac5c, 0},
	{"closemenu", (void*)0x80a8ffa, 0},
	{"closeingamemenu", (void*)0x80a8f5c, 0},
	{"freezecontrols", (void*)0x80a89c8, 0},
	{"disableweapons", (void*)0x80a879c, 0},
	{"enableweapons", (void*)0x80a8728, 0},
	{"setreverb", (void*)0x80aa95e, 0},
	{"deactivatereverb", (void*)0x80aa848, 0},
	{"setchannelvolumes", (void*)0x80aaafe, 0},
	{"deactivatechannelvolumes", (void*)0x80aa726, 0},
	{"setweaponammoclip", (void*)0x80aa540, 0},
	{"setweaponammostock", (void*)0x80ad248, 0},
	{"getweaponammoclip", (void*)0x80aa494, 0},
	{"getweaponammostock", (void*)0x80aa638, 0},
	{"anyammoforweaponmodes", (void*)0x80aa2f8, 0},
	{"iprintln", (void*)0x80aa262, 0},
	{"iprintlnbold", (void*)0x80aa1cc, 0},
	{"spawn", (void*)0x80aa12c, 0},
	{"setentertime", (void*)0x80a8a46, 0},
	{"cloneplayer", (void*)0x80acf50, 0},
	{"setclientdvar", (void*)0x80a9f74, 0},
	{"setclientdvars", (void*)0x80a9d56, 0},
	{"playlocalsound", (void*)0x80a9c9a, 0},
	{"stoplocalsound", (void*)0x80a9bde, 0},
	{"istalking", (void*)0x80a96f8, 0},
	{"allowspectateteam", (void*)0x80a9518, 0},
	{"getguid", (void*)0x80a9492, 0},
	{"getuid", PlayerCmd_GetUid, 0},
	{"getxuid", (void*)0x80a9418, 0},
	{"allowads", (void*)0x80ab852, 0},
	{"allowjump", (void*)0x80a8932, 0},
	{"allowsprint", (void*)0x80a889c, 0},
	{"setspreadoverride", (void*)0x80a9318, 0},
	{"resetspreadoverride", (void*)0x80a8bbe, 0},
	{"setactionslot", (void*)0x80a9156, 0},
	{"getweaponslist", (void*)0x80abeba, 0},
	{"getweaponslistprimaries", (void*)0x80abdd0, 0},
	{"setperk", (void*)0x80ad4ae, 0},
	{"hasperk", (void*)0x80ad576, 0},
	{"clearperks", (void*)0x80ad428, 0},
	{"unsetperk", (void*)0x80ad634, 0},
	{"updatescores", (void*)0x80a8e50, 0},
	{"updatedmscores", (void*)0x80a8c5e, 0},
	{"setrank", (void*)0x80a8ac4, 0},
	{"getuserinfo", PlayerCmd_GetUserinfo, 0},

